export function toLowerCase(str: string): string;
export function stringStartsWith(str: string, sub: string): boolean;
export const now: () => number;
export const isArr: (arg: any) => arg is any[];
export function isObj(a: any): a is Record<string, any>;
export function isNum(a: any): a is number;
export function isStr(a: any): a is string;
export function isFnc(a: any): a is Function;
export function isUnd(a: any): a is undefined;
export function isNil(a: any): a is null | undefined;
export function isSvg(a: any): a is SVGElement;
export function isHex(a: any): boolean;
export function isRgb(a: any): boolean;
export function isHsl(a: any): boolean;
export function isCol(a: any): boolean;
export function isKey(a: any): boolean;
export function isValidSVGAttribute(el: Target, propertyName: string): boolean;
export function parseNumber(str: number | string): number;
export const pow: (x: number, y: number) => number;
export const sqrt: (x: number) => number;
export const sin: (x: number) => number;
export const cos: (x: number) => number;
export const abs: (x: number) => number;
export const exp: (x: number) => number;
export const ceil: (x: number) => number;
export const floor: (x: number) => number;
export const asin: (x: number) => number;
export const max: (...values: number[]) => number;
export const atan2: (y: number, x: number) => number;
export const PI: number;
export const _round: (x: number) => number;
export function clamp(v: number, min: number, max: number): number;
export function round(v: number, decimalLength: number): number;
export function snap(v: number, increment: number | Array<number>): number;
export function lerp(start: number, end: number, factor: number): number;
export function clampInfinity(v: number): number;
export function normalizeTime(v: number): number;
export function cloneArray<T>(a: T[]): T[];
export function mergeObjects<T, U>(o1: T, o2: U): T & U;
export function forEachChildren(parent: any, callback: Function, reverse?: boolean, prevProp?: string, nextProp?: string): void;
export function removeChild(parent: any, child: any, prevProp?: string, nextProp?: string): void;
export function addChild(parent: any, child: any, sortMethod?: Function, prevProp?: string, nextProp?: string): void;
import type { Target } from '../types/index.js';
